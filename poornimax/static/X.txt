from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model
from django.http import JsonResponse
from django.utils import timezone
from django.views.decorators.http import require_POST
from django.db.models import Q, Max, OuterRef, Subquery
from django.template.loader import render_to_string
from django.utils.dateparse import parse_datetime
from chat.models import Message, DeletedChat
import os


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


User = get_user_model()

from django.db.models import OuterRef, Subquery, Q, Max

from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model
from django.http import JsonResponse
from django.utils import timezone
from django.views.decorators.http import require_POST
from django.db.models import Q, Max, OuterRef, Subquery
from django.template.loader import render_to_string
from django.utils.dateparse import parse_datetime
from chat.models import Message, DeletedChat

User = get_user_model()

from django.db.models import Exists, OuterRef

@login_required
def inbox_view(request):
    user = request.user
    msgs = Message.objects.filter(Q(sender=user) | Q(receiver=user))

    user_ids = set()
    for msg in msgs.values('sender', 'receiver'):
        if msg['sender'] != user.id:
            user_ids.add(msg['sender'])
        if msg['receiver'] != user.id:
            user_ids.add(msg['receiver'])

    deleted_chats = DeletedChat.objects.filter(user=user, other_user__in=user_ids)
    deleted_map = {dc.other_user_id: dc.deleted_at for dc in deleted_chats}

    filtered_user_ids = []
    for other_id in user_ids:
        last_msg_time = msgs.filter(
            Q(sender=user, receiver=other_id) | Q(sender=other_id, receiver=user)
        ).aggregate(last_time=Max('timestamp'))['last_time']

        deleted_at = deleted_map.get(other_id)
        if not deleted_at or (last_msg_time and last_msg_time > deleted_at):
            filtered_user_ids.append(other_id)

    users = User.objects.filter(id__in=filtered_user_ids)

    # Subquery to get last message timestamp
    last_msg_subquery = Message.objects.filter(
        Q(sender=user, receiver=OuterRef('pk')) | Q(sender=OuterRef('pk'), receiver=user)
    ).order_by('-timestamp').values('timestamp')[:1]

    # Subquery to check if there are unread messages from this user to the current user
    unread_subquery = Message.objects.filter(
        sender=OuterRef('pk'),
        receiver=user,
        read=False
    )

    users = users.annotate(
        last_message_time=Subquery(last_msg_subquery),
        has_unread=Exists(unread_subquery)
    ).order_by('-last_message_time')

    return render(request, 'chat/inbox.html', {'users': users})



@login_required
def inbox_content(request):
    user = request.user
    msgs = Message.objects.filter(Q(sender=user) | Q(receiver=user))

    user_ids = set()
    for msg in msgs.values('sender', 'receiver'):
        if msg['sender'] != user.id:
            user_ids.add(msg['sender'])
        if msg['receiver'] != user.id:
            user_ids.add(msg['receiver'])

    deleted_chats = DeletedChat.objects.filter(user=user, other_user__in=user_ids)
    deleted_map = {dc.other_user_id: dc.deleted_at for dc in deleted_chats}

    filtered_user_ids = []
    for other_id in user_ids:
        last_msg_time = msgs.filter(
            Q(sender=user, receiver=other_id) | Q(sender=other_id, receiver=user)
        ).aggregate(last_time=Max('timestamp'))['last_time']

        deleted_at = deleted_map.get(other_id)
        if not deleted_at or (last_msg_time and last_msg_time > deleted_at):
            filtered_user_ids.append(other_id)

    users = User.objects.filter(id__in=filtered_user_ids)

    # Simplified and consistent last message timestamp subquery
    last_message_time_subquery = msgs.filter(
        Q(sender=user, receiver=OuterRef('pk')) | Q(sender=OuterRef('pk'), receiver=user)
    ).order_by('-timestamp').values('timestamp')[:1]

    users = users.annotate(
        last_message_time=Subquery(last_message_time_subquery)
    ).order_by('-last_message_time')

    html = render_to_string('chat/inbox_partial.html', {'users': users}, request=request)
    return JsonResponse({'html': html})

@login_required
def inbox_updates(request):
    after = request.GET.get('after')
    if not after:
        return JsonResponse({'error': 'Missing timestamp parameter'}, status=400)

    after_dt = parse_datetime(after)
    if after_dt is None:
        return JsonResponse({'error': 'Invalid timestamp format'}, status=400)

    new_messages = Message.objects.filter(
        Q(receiver=request.user) | Q(sender=request.user),
        timestamp__gt=after_dt
    ).exists()

    deleted_chats = DeletedChat.objects.filter(
        user=request.user,
        deleted_at__gt=after_dt
    ).exists()

    return JsonResponse({
        'updates': True,
        'last_update': timezone.now().isoformat(),
        'new_messages': new_messages,
        'deleted_chats': deleted_chats
    })


@login_required
def chat_view(request, username):
    other_user = get_object_or_404(User, username=username)

    # Mark all unread messages from other_user to current user as read
    Message.objects.filter(sender=other_user, receiver=request.user, read=False).update(read=True)

    if request.method == 'POST':
        content = request.POST.get('message')
        if content:
            msg = Message.objects.create(sender=request.user, receiver=other_user, content=content)
            return JsonResponse({
                'sender': request.user.username,
                'content': msg.content,
                'timestamp': msg.timestamp.strftime('%H:%M'),
                'sender_is_user': True
            })

    deleted_chat = DeletedChat.objects.filter(user=request.user, other_user=other_user).first()

    if deleted_chat:
        messages = Message.objects.filter(
            sender__in=[request.user, other_user],
            receiver__in=[request.user, other_user],
            timestamp__gt=deleted_chat.deleted_at
        )
    else:
        messages = Message.objects.filter(
            sender__in=[request.user, other_user],
            receiver__in=[request.user, other_user]
        )

    return render(request, 'chat/chat.html', {
        'messages': messages,
        'other_user': other_user
    })


from pathlib import Path
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_POST
from django.http import JsonResponse
from django.shortcuts import get_object_or_404
from django.utils import timezone
from django.db.models import Q
from .models import DeletedChat, Message
from accounts.models import User  # Adjust import if needed
from django.conf import settings

@login_required
@require_POST
def delete_chat(request, username):
    other_user = get_object_or_404(User, username=username)

    if other_user == request.user:
        return JsonResponse({'success': False, 'error': 'Cannot delete chat with yourself.'}, status=400)

    user1 = request.user.username
    user2 = other_user.username

    # Use pathlib.Path for paths
    base_dir = settings.BASE_DIR / 'deleted_chats'
    base_dir.mkdir(parents=True, exist_ok=True)  # create directory if it doesn't exist

    file_path = base_dir / f"{user1}_deletes_{user2}.txt"

    deleted_chat_record = DeletedChat.objects.filter(user=request.user, other_user=other_user).first()
    last_deleted_at = deleted_chat_record.deleted_at if deleted_chat_record else None

    if last_deleted_at:
        messages = Message.objects.filter(
            Q(sender=request.user, receiver=other_user) | Q(sender=other_user, receiver=request.user),
            timestamp__gt=last_deleted_at
        ).order_by('timestamp')
    else:
        messages = Message.objects.filter(
            Q(sender=request.user, receiver=other_user) | Q(sender=other_user, receiver=request.user)
        ).order_by('timestamp')

    if not messages.exists():
        DeletedChat.objects.update_or_create(
            user=request.user,
            other_user=other_user,
            defaults={'deleted_at': timezone.now()}
        )
        return JsonResponse({'success': True, 'message': 'No new messages to delete.'})

    timestamp_str = timezone.now().strftime('%Y-%m-%d %H:%M:%S')
    header = f"\n--- Chat deleted on {timestamp_str} ---\n"

    lines = []
    for msg in messages:
        time_str = msg.timestamp.strftime('%Y-%m-%d %H:%M:%S')
        sender = msg.sender.username
        content = msg.content.replace('\n', ' ')
        lines.append(f"[{time_str}] {sender}: {content}")

    chat_text = header + "\n".join(lines) + "\n"

    # Open the file using the string representation of Path
    with open(str(file_path), 'a', encoding='utf-8') as f:
        f.write(chat_text)

    DeletedChat.objects.update_or_create(
        user=request.user,
        other_user=other_user,
        defaults={'deleted_at': timezone.now()}
    )

    return JsonResponse({'success': True})


@login_required
def poll_new_messages(request, username):
    other_user = get_object_or_404(User, username=username)

    last_timestamp = request.GET.get('after')
    if last_timestamp:
        last_dt = parse_datetime(last_timestamp)
    else:
        last_dt = timezone.now()

    new_messages = Message.objects.filter(
        sender=other_user,
        receiver=request.user,
        timestamp__gt=last_dt
    )

    data = [{
        'sender': msg.sender.username,
        'content': msg.content,
        'timestamp': msg.timestamp.strftime('%H:%M'),
        'sender_is_user': False
    } for msg in new_messages]

    return JsonResponse(data, safe=False)

















    {% load static %}
    {% load humanize %}
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Chat with {{ other_user.full_name }}</title>
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
      <style>
        /* Base Styles */
        :root {
          --primary: #6c63ff;
          --primary-light: #8f88ff;
          --primary-dark: #5046e5;
          --secondary: #ff6584;
          --secondary-light: #ff85a2;
          --bg: #f8f9fa;
          --text: #333;
          --text-light: #777;
          --card-bg: #fff;
          --shadow: rgba(0, 0, 0, 0.1);
          --radius: 12px;
          --transition: all 0.3s ease;
          --sent-bg: #dcf8c6;
          --received-bg: #f1f0f0;
        }
    
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
    
        body {
          background-color: var(--bg);
          color: var(--text);
          min-height: 100vh;
          display: flex;
          flex-direction: column;
          overflow-x: hidden;
        }
    
        a {
          text-decoration: none;
          color: inherit;
        }
        
        button {
          cursor: pointer;
          border: none;
          outline: none;
          font-size: 14px;
          font-weight: 500;
          background: transparent;
        }
    
        /* Loading Overlay */
        .loading-overlay {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: rgba(255, 255, 255, 0.9);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
          transition: opacity 0.3s ease;
        }
    
        .spinner {
          width: 70px;
          text-align: center;
        }
    
        .spinner > div {
          width: 18px;
          height: 18px;
          background-color: var(--primary);
          border-radius: 100%;
          display: inline-block;
          animation: sk-bouncedelay 1.4s infinite ease-in-out both;
          margin: 0 3px;
        }
    
        .spinner .bounce1 {
          animation-delay: -0.32s;
        }
    
        .spinner .bounce2 {
          animation-delay: -0.16s;
        }
    
        @keyframes sk-bouncedelay {
          0%, 80%, 100% { 
            transform: scale(0);
          } 40% { 
            transform: scale(1.0);
          }
        }
    
        /* Chat Header */
        .chat-header {
          position: sticky;
          top: 0;
          z-index: 100;
          display: flex;
          align-items: center;
          justify-content: space-between;
          padding: 15px 20px;
          background: white;
          box-shadow: 0 2px 15px var(--shadow);
          border-bottom: 1px solid rgba(108, 99, 255, 0.1);
        }
    
        .header-left {
          display: flex;
          align-items: center;
          gap: 15px;
        }
    
        .back-button {
          color: var(--primary);
          font-size: 22px;
          transition: var(--transition);
        }
    
        .back-button:hover {
          transform: translateX(-3px);
        }
    
        .user-info-container {
          display: flex;
          align-items: center;
          gap: 12px;
        }
    
        .chat-profile-pic {
          width: 45px;
          height: 45px;
          border-radius: 50%;
          object-fit: cover;
          border: 2px solid var(--primary-light);
          box-shadow: 0 2px 10px rgba(108, 99, 255, 0.2);
          transition: var(--transition);
        }
    
        .chat-profile-pic:hover {
          transform: scale(1.05);
          box-shadow: 0 0 15px var(--primary-light);
        }
    
        .user-info h3 {
          font-size: 16px;
          font-weight: 600;
          margin-bottom: 2px;
          color: var(--text);
        }
    
        .user-status {
          font-size: 12px;
          color: var(--text-light);
          display: flex;
          align-items: center;
          gap: 5px;
        }
    
        .status-dot {
          width: 8px;
          height: 8px;
          background-color: #4CAF50;
          border-radius: 50%;
          display: inline-block;
        }
    
        .header-actions {
          display: flex;
          gap: 15px;
        }
    
        .header-actions button {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          color: var(--primary);
          transition: var(--transition);
          background-color: rgba(108, 99, 255, 0.1);
        }
    
        .header-actions button:hover {
          background-color: rgba(108, 99, 255, 0.2);
          transform: scale(1.05);
        }
    
        /* Chat Container */
        .chat-container {
          flex: 1;
          max-width: 1000px;
          margin: 0 auto;
          width: 100%;
          padding: 0 15px;
          display: flex;
          flex-direction: column;
        }
    
        /* Chat Messages */
        .chat-body {
          flex: 1;
          overflow-y: auto;
          padding: 20px 10px;
          margin-bottom: 120px; /* Increased to account for the input bar and nav */
          display: flex;
          flex-direction: column;
          min-height: calc(100vh - 200px);
        }
    
        .message {
          margin-bottom: 15px;
          padding: 10px 15px;
          border-radius: 18px;
          max-width: 75%;
          position: relative;
          animation: fadeIn 0.3s ease;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
    
        @keyframes fadeIn {
          from {
            opacity: 0;
            transform: translateY(10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
    
        .sent {
          background-color: var(--sent-bg);
          margin-left: auto;
          border-bottom-right-radius: 5px;
          align-self: flex-end;
        }
    
        .received {
          background-color: var(--received-bg);
          margin-right: auto;
          border-bottom-left-radius: 5px;
          align-self: flex-start;
        }
    
        .message-content {
          word-break: break-word;
          font-size: 15px;
          line-height: 1.4;
        }
    
        .message-meta {
          font-size: 11px;
          color: var(--text-light);
          text-align: right;
          margin-top: 4px;
        }
    
        /* Message Form */
        .message-form-container {
          position: fixed;
          bottom: 0;
          left: 0;
          right: 0;
          padding: 15px;
          background-color: white;
          box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
          z-index: 10;
        }
    
        .message-form {
          max-width: 1000px;
          margin: 0 auto;
          display: flex;
          align-items: center;
          gap: 10px;
        }
    
        .message-input-wrapper {
          flex: 1;
          position: relative;
          display: flex;
          align-items: center;
          background-color: var(--bg);
          border-radius: 24px;
          padding: 0 15px;
          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
          transition: var(--transition);
          border: 1px solid rgba(108, 99, 255, 0.2);
        }
    
        .message-input-wrapper:focus-within {
          box-shadow: 0 0 0 2px rgba(108, 99, 255, 0.3);
        }
    
        #message-input {
          flex: 1;
          border: none;
          outline: none;
          padding: 12px 0;
          background: transparent;
          font-size: 15px;
        }
    
        .emoji-button {
          color: var(--text-light);
          font-size: 20px;
          padding: 8px;
          transition: var(--transition);
        }
    
        .emoji-button:hover {
          color: var(--primary);
          transform: scale(1.1);
        }
    
        .send-button {
          width: 45px;
          height: 45px;
          background: linear-gradient(45deg, var(--primary), var(--primary-light));
          color: white;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          transition: var(--transition);
          box-shadow: 0 2px 10px rgba(108, 99, 255, 0.3);
        }
    
        .send-button:hover {
          transform: scale(1.05);
          box-shadow: 0 5px 15px rgba(108, 99, 255, 0.4);
        }
    
        .send-button i {
          font-size: 18px;
        }
    
        /* Attachment options */
        .attachment-options {
          display: flex;
          gap: 10px;
        }
    
        .attachment-button {
          color: var(--text-light);
          font-size: 18px;
          padding: 8px;
          transition: var(--transition);
        }
    
        .attachment-button:hover {
          color: var(--primary);
          transform: scale(1.1);
        }
    
        /* Bottom Navigation */
        nav {
          position: fixed;
          bottom: 0;
          left: 0;
          width: 100%;
          background: rgba(255, 255, 255, 0.95);
          backdrop-filter: blur(10px);
          display: flex;
          justify-content: space-around;
          padding: 12px 0;
          box-shadow: 0 -3px 15px var(--shadow);
          z-index: 100;
          transform: translateY(100%);
          opacity: 0;
        }
    
        nav a {
          display: flex;
          flex-direction: column;
          align-items: center;
          color: var(--text-light);
          padding: 8px 16px;
          position: relative;
          transition: var(--transition);
        }
    
        nav a i {
          transition: var(--transition);
          opacity: 0.7;
          font-size: 24px;
        }
    
        nav a:hover i {
          transform: translateY(-5px);
          opacity: 1;
        }
    
        nav a.active-link {
          color: var(--primary);
        }
    
        nav a.active-link i {
          opacity: 1;
          color: var(--primary);
        }
    
        nav a.active-link::after {
          content: '';
          position: absolute;
          bottom: -12px;
          left: 50%;
          transform: translateX(-50%);
          width: 40px;
          height: 4px;
          background: linear-gradient(90deg, var(--primary), var(--primary-light));
          border-radius: 4px;
        }
    
        /* Date Divider */
        .date-divider {
          display: flex;
          align-items: center;
          justify-content: center;
          margin: 20px 0;
        }
    
        .date-divider span {
          background-color: rgba(108, 99, 255, 0.1);
          padding: 5px 12px;
          border-radius: 15px;
          font-size: 12px;
          color: var(--primary-dark);
          font-weight: 500;
        }
    
        /* Typing indicator */
        .typing-indicator {
          display: flex;
          align-items: center;
          padding: 10px 15px;
          border-radius: 18px;
          max-width: 100px;
          margin-right: auto;
          background-color: var(--received-bg);
          margin-bottom: 15px;
          opacity: 0;
          transition: opacity 0.3s ease;
        }
    
        .typing-indicator.visible {
          opacity: 1;
        }
    
        .typing-dot {
          height: 8px;
          width: 8px;
          border-radius: 50%;
          background-color: var(--text-light);
          margin: 0 2px;
          display: inline-block;
          animation: typingAnimation 1.4s infinite ease-in-out;
        }
    
        .typing-dot:nth-child(1) {
          animation-delay: 0s;
        }
    
        .typing-dot:nth-child(2) {
          animation-delay: 0.2s;
        }
    
        .typing-dot:nth-child(3) {
          animation-delay: 0.4s;
        }
    
        @keyframes typingAnimation {
          0%, 60%, 100% {
            transform: translateY(0);
          }
          30% {
            transform: translateY(-5px);
          }
        }
    
        /* Responsive Design */
        @media (max-width: 768px) {
          .chat-header {
            padding: 10px 15px;
          }
    
          .message {
            max-width: 85%;
          }
    
          .chat-profile-pic {
            width: 40px;
            height: 40px;
          }
    
          .header-actions button {
            width: 35px;
            height: 35px;
          }
        }
      </style>
    </head>
    <body>
      <!-- Loading Overlay -->
      <div id="loading-overlay" class="loading-overlay">
        <div class="spinner">
          <div class="bounce1"></div>
          <div class="bounce2"></div>
          <div class="bounce3"></div>
        </div>
      </div>
    
      <!-- Chat Header -->
      <div class="chat-header">
        <div class="header-left">
          <a href="{% url 'feed:home' %}" class="back-button">
            <i class="fas fa-arrow-left"></i>
          </a>
          <a href="{% url 'feed:profile' user_id=other_user.id %}" class="user-info-container">
            <img src="{{ other_user.profile_picture.url }}" alt="{{ other_user.full_name }}" class="chat-profile-pic">
            <div class="user-info">
              <h3>{{ other_user.full_name }}</h3>
              <div class="user-status">
                <span class="status-dot"></span>
                <span>Online</span>
              </div>
            </div>
          </a>
        </div>
        <div class="header-actions">
          <button type="button" aria-label="Voice call">
            <i class="fas fa-phone"></i>
          </button>
          <button type="button" aria-label="Video call">
            <i class="fas fa-video"></i>
          </button>
          <button type="button" aria-label="More options">
            <i class="fas fa-ellipsis-v"></i>
          </button>
        </div>
      </div>
    
      <!-- Chat Container -->
      <div class="chat-container">
        <!-- Chat Messages -->
        <div class="chat-body" id="chat-messages">
          <div class="date-divider">
            <span>Today</span>
          </div>
          
          {% for message in messages %}
            <div class="message {% if message.sender == request.user %}sent{% else %}received{% endif %}">
              <div class="message-content">
                {{ message.content }}
              </div>
              <div class="message-meta">
                {{ message.timestamp|time:"H:i" }}
              </div>
            </div>
          {% endfor %}
          
          <div class="typing-indicator" id="typing-indicator">
            <span class="typing-dot"></span>
            <span class="typing-dot"></span>
            <span class="typing-dot"></span>
          </div>
        </div>
      </div>
    
      <!-- Message Form -->
      <div class="message-form-container">
        <form id="chat-form" class="message-form">
          {% csrf_token %}
          <div class="attachment-options">
            <button type="button" class="attachment-button" aria-label="Add attachment">
              <i class="fas fa-paperclip"></i>
            </button>
            <button type="button" class="attachment-button" aria-label="Add image">
              <i class="fas fa-image"></i>
            </button>
          </div>
          <div class="message-input-wrapper">
            <input type="text" id="message-input" class="message-input" placeholder="Type your message...">
            <button type="button" class="emoji-button" aria-label="Add emoji">
              <i class="far fa-smile"></i>
            </button>
          </div>
          <button type="submit" class="send-button" aria-label="Send message">
            <i class="fas fa-paper-plane"></i>
          </button>
        </form>
      </div>
    
      <!-- Bottom Navigation Bar -->
      <nav>
        <a href="{% url 'feed:home' %}">
          <i class="fas fa-home"></i>
        </a>
        <a href="{% url 'feed:explore' %}">
          <i class="fas fa-compass"></i>
        </a>
        <a href="{% url 'feed:create_post' %}">
          <i class="fas fa-plus-circle"></i>
        </a>
        <a href="{% url 'feed:friends_list' %}">
          <i class="fas fa-user-friends"></i>
        </a>
        <a href="{% url 'feed:confession' %}">
          <i class="fas fa-bell"></i>
        </a>
      </nav>
      <script>
        // WebSocket connection setup
    const username = "{{ other_user.username }}";
    const currentUser = "{{ request.user.username }}";
    const chatSocket = new WebSocket(
      'ws://' + window.location.host + '/ws/chat/' + username + '/'
    );
    
    // Elements
    const chatMessages = document.querySelector('#chat-messages');
    const messageForm = document.querySelector('#chat-form');
    const messageInput = document.querySelector('#message-input');
    const typingIndicator = document.querySelector('#typing-indicator');
    const loadingOverlay = document.getElementById('loading-overlay');
    const sendButton = document.querySelector('.send-button');
    
    // BRUTALLY EFFECTIVE scrollToBottom function - guaranteed to work
    function forceScrollToBottom() {
      // This is a much more aggressive approach to ensure scrolling happens
      try {
        // Try multiple approaches to force scrolling
        chatMessages.scrollTop = 999999; // Large number to ensure bottom
        
        // Use modern scrollTo with maximum value
        chatMessages.scrollTo({
          top: 999999,
          behavior: 'auto' // Use 'auto' instead of 'smooth' for more reliable behavior
        });
        
        // Scroll the entire window as a last resort
        window.scrollTo(0, document.body.scrollHeight);
        
        // As an extra measure, directly calculate and set the scrollTop
        const lastMessage = chatMessages.lastElementChild;
        if (lastMessage) {
          const scrollDestination = lastMessage.offsetTop;
          chatMessages.scrollTop = scrollDestination;
        }
      } catch (err) {
        console.error("Scroll error:", err);
      }
    }
    
    // Function to continuously attempt scrolling for a period to ensure it happens
    function persistentScroll(duration = 1000, interval = 100) {
      const endTime = Date.now() + duration;
      
      function attemptScroll() {
        forceScrollToBottom();
        
        if (Date.now() < endTime) {
          setTimeout(attemptScroll, interval);
        }
      }
      
      attemptScroll();
    }
    
    // Handle incoming messages with guaranteed scrolling
    chatSocket.onmessage = function(e) {
      const data = JSON.parse(e.data);
      const message = data.message;
      const sender = data.sender;
      
      // Hide typing indicator when message is received
      typingIndicator.classList.remove('visible');
      
      // Determine if the message is from the current user
      const isSentByCurrentUser = (sender === currentUser);
      
      // Create message element
      const messageElement = document.createElement('div');
      messageElement.className = 'message ' + (isSentByCurrentUser ? 'sent' : 'received');
      
      // Create message content
      const contentElement = document.createElement('div');
      contentElement.className = 'message-content';
      contentElement.textContent = message;
      
      // Create message timestamp
      const metaElement = document.createElement('div');
      metaElement.className = 'message-meta';
      const now = new Date();
      metaElement.textContent = now.getHours().toString().padStart(2, '0') + ':' + 
                               now.getMinutes().toString().padStart(2, '0');
      
      // Add elements to message
      messageElement.appendChild(contentElement);
      messageElement.appendChild(metaElement);
      
      // Add message to chat
      chatMessages.appendChild(messageElement);
      
      // Aggressive persistent scrolling to ensure message visibility
      persistentScroll(500);
    };
    
    // Handle form submission with guaranteed scrolling
    messageForm.addEventListener('submit', function(e) {
      e.preventDefault();
      const message = messageInput.value.trim();
      
      if (message) {
        // Send message via WebSocket
        chatSocket.send(JSON.stringify({
          'message': message,
          'sender': currentUser
        }));
        
        // Clear input
        messageInput.value = '';
        messageInput.focus();
        
        // Critical: persistent scrolling after sending message
        persistentScroll(800);
      }
    });
    
    // Direct click handler for send button
    sendButton.addEventListener('click', function() {
      const message = messageInput.value.trim();
      
      if (message) {
        // Send message via WebSocket
        chatSocket.send(JSON.stringify({
          'message': message,
          'sender': currentUser
        }));
        
        // Clear input
        messageInput.value = '';
        messageInput.focus();
        
        // Critical: persistent scrolling after clicking send
        persistentScroll(800);
      }
    });
    
    // Aggressive page load scrolling
    document.addEventListener('DOMContentLoaded', function() {
      // Initial aggressive scroll
      forceScrollToBottom();
      
      // Continue attempting to scroll throughout page load
      persistentScroll(2000);
      
      // Hide loading overlay after all content is loaded
      setTimeout(function() {
        // Final aggressive scroll before revealing content
        forceScrollToBottom();
        
        // Hide loading overlay
        loadingOverlay.style.opacity = '0';
        setTimeout(() => {
          loadingOverlay.style.display = 'none';
          // One last attempt to scroll after overlay is gone
          forceScrollToBottom();
        }, 300);
        
        // Focus on input field
        messageInput.focus();
      }, 800);
    });
    
    // Handle message input directly
    messageInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        
        const message = messageInput.value.trim();
        if (message) {
          // Send message
          chatSocket.send(JSON.stringify({
            'message': message,
            'sender': currentUser
          }));
          
          // Clear input
          messageInput.value = '';
          
          // Critical: persistent scrolling after sending with enter key
          persistentScroll(800);
        }
      }
    });
    
    // Re-apply scroll to bottom when window is resized
    window.addEventListener('resize', forceScrollToBottom);
    
    // Ensure scrolling on any interactions
    document.addEventListener('click', function() {
      setTimeout(forceScrollToBottom, 100);
    });
    
    // Handle attachment buttons
    const attachmentButtons = document.querySelectorAll('.attachment-button');
    attachmentButtons.forEach(button => {
      button.addEventListener('click', function() {
        alert('Attachment feature coming soon!');
      });
    });
    
    // Handle emoji button
    const emojiButton = document.querySelector('.emoji-button');
    emojiButton.addEventListener('click', function() {
      alert('Emoji picker coming soon!');
    });
      </script>
    </body>
    </html>













    {% for user in users %}
    <div class="chat-item-wrapper" data-username="{{ user.username }}">
      <div class="chat-item">
        <a href="{% url 'chat:chat_with_user' user.username %}" class="chat-link">
          <div class="profile-pic-container" style="position: relative;">
            <img src="{{ user.profile_picture.url }}" alt="Profile" class="profile-pic">
            <div class="profile-pic-glow"></div>
            {% if user.has_unread %}
              <span class="unread-dot"></span>
            {% endif %}
          </div>
          <div class="user-info">
            <h3>{{ user.full_name }}</h3>
            <p>
              {% if user.questionnaire %}
                <i class="fas fa-graduation-cap"></i> {{ user.department }} • {{ user.questionnaire.year }}
              {% else %}
                <i class="fas fa-user"></i> {{ user.username }}
              {% endif %}
            </p>
          </div>
        </a>
        <div class="chat-status">
          <div class="menu-dots">
            <i class="fas fa-ellipsis-v"></i>
          </div>
          <div class="dropdown-menu">
            <button class="delete-btn" data-username="{{ user.username }}">
              <i class="fas fa-trash-alt"></i> Delete Chat
            </button>
          </div>
        </div>
      </div>
    </div>
  {% endfor %}
  <style>
      .unread-dot {
    position: absolute;
    top: 5px;       /* Adjust as needed */
    right: 5px;     /* Adjust as needed */
    height: 12px;
    width: 12px;
    background-color: #ff3b3b;  /* Bright red */
    border-radius: 50%;
    border: 2px solid white;    /* Optional white border */
    box-shadow: 0 0 3px rgba(255, 0, 0, 0.5);
    pointer-events: none;
    z-index: 10;
  }
  
  </style>














{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta name="csrf-token" content="{{ csrf_token }}">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PoornimaX - Chat</title>
  <link rel="stylesheet" href="{% static 'css/styles.css' %}">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/particles.js/2.0.0/particles.min.js"></script>
  <style>
    .unread-dot {
  position: absolute;
  top: 5px;
  right: 5px;
  height: 12px;
  width: 12px;
  background-color: #ff3b3b;
  border-radius: 50%;
  border: 2px solid white;
  box-shadow: 0 0 5px rgba(255, 0, 0, 0.5);
  z-index: 2;
}

    /* Base Styles */
    :root {
      --primary: #6c63ff;
      --primary-light: #8f88ff;
      --primary-dark: #5046e5;
      --secondary: #ff6584;
      --secondary-light: #ff85a2;
      --bg: #f8f9fa;
      --text: #333;
      --text-light: #777;
      --card-bg: #fff;
      --shadow: rgba(0, 0, 0, 0.1);
      --radius: 12px;
      --transition: all 0.3s ease;
      --danger: #ff3b5c;
      --danger-dark: #e6354f;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', sans-serif;
    }

    body {
      background-color: var(--bg);
      color: var(--text);
      min-height: 100vh;
      padding-bottom: 70px;
      overflow-x: hidden;
    }

    a {
      text-decoration: none;
      color: inherit;
    }
    
    button {
      cursor: pointer;
      border: none;
      outline: none;
      font-size: 14px;
      font-weight: 500;
      background: transparent;
    }

    /* Loader Styles */
    .loader-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: var(--bg);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }

    .loader {
      width: 80px;
      height: 40px;
      display: flex;
    }

    .loader:before,
    .loader:after {
      content: "";
      margin: 0 -2px 0 0;
      flex: 1;
      --c: no-repeat linear-gradient(#046D8B 0 0);
      background: var(--c), var(--c), var(--c), var(--c);
      animation: l13-1 1s infinite linear, l13-2 1s infinite linear;
    }

    .loader:after {
      transform: scale(-1);
      margin: 0 0 0 -2px;
    }

    @keyframes l13-1 {
      0%, 3%   {background-size: 0 4px, 4px 0, 0 4px, 4px 0;}
      12.5%    {background-size: 50% 4px, 4px 0, 0 4px, 4px 0;}
      25%      {background-size: 50% 4px, 4px 50%, 0 4px, 4px 0;}
      37.5%    {background-size: 50% 4px, 4px 50%, 50% 4px, 4px 0;}
      46%, 54% {background-size: 50% 4px, 4px 50%, 50% 4px, 4px 50%;}
      62.5%    {background-size: 0 4px, 4px 50%, 50% 4px, 4px 50%;}
      75%      {background-size: 0 4px, 4px 0, 50% 4px, 4px 50%;}
      87.5%    {background-size: 0 4px, 4px 0, 0 4px, 4px 50%;}
      96%,100% {background-size: 0 4px, 4px 0, 0 4px, 4px 0;}
    }

    @keyframes l13-2 {
      0%, 49.9%  {background-position: 0 20px, 50% 20px, 20px 100%, 100% 100%;}
      50%, 100%  {background-position: right 20px top 20px, 50% 100%, 100% 100%, 100% 20px;}
    }

    /* Particles Background */
    #particles-js {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      opacity: 0.2;
    }

    /* Layout */
    .content-wrapper {
      max-width: 1000px;
      margin: 0 auto;
      padding: 0 15px;
      opacity: 0;
      transform: translateY(15px);
      animation: fadeInUp 0.8s forwards;
      animation-delay: 1s;
    }

    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Header */
    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px 0;
      margin-bottom: 20px;
    }

    .header-left {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    header h2 {
      font-size: 22px;
      font-weight: 600;
      color: var(--primary);
      background: linear-gradient(45deg, var(--primary), var(--primary-light));
      background-clip: text;
      -webkit-background-clip: text;
      color: transparent;
    }

    header a img {
      width: 42px;
      height: 42px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid var(--primary);
      transition: var(--transition);
      box-shadow: 0 2px 10px rgba(108, 99, 255, 0.2);
    }

    header a img:hover {
      transform: scale(1.1) rotate(5deg);
      box-shadow: 0 0 15px var(--primary-light);
    }

    /* Section Title */
    .section-title {
      font-size: 20px;
      font-weight: 600;
      color: var(--text);
      position: relative;
      padding-left: 15px;
      margin-bottom: 20px;
    }

    .section-title::before {
      content: '';
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      width: 5px;
      height: 20px;
      background: linear-gradient(to bottom, var(--primary), var(--primary-light));
      border-radius: 3px;
    }

    /* Chat List */
    .chat-list {
      display: flex;
      flex-direction: column;
      gap: 15px;
      padding: 10px 5px;
    }

    .chat-item {
      background-color: white;
      border-radius: var(--radius);
      box-shadow: 0 8px 20px rgba(108, 99, 255, 0.12);
      overflow: hidden;
      display: flex;
      align-items: center;
      padding: 15px;
      transition: var(--transition);
      border: 1px solid rgba(108, 99, 255, 0.08);
      position: relative;
    }

    .chat-item::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(90deg, var(--primary), var(--secondary));
      opacity: 0;
      transition: var(--transition);
    }

    .chat-item:hover::before {
      opacity: 1;
    }

    .chat-item:hover {
      transform: translateY(-3px);
      box-shadow: 0 15px 30px rgba(108, 99, 255, 0.2);
    }

    .profile-pic-container {
      position: relative;
      width: 60px;
      height: 60px;
      border-radius: 12px;
      overflow: hidden;
      margin-right: 15px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .profile-pic {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: var(--transition);
    }

    .chat-item:hover .profile-pic {
      transform: scale(1.08);
    }

    .profile-pic-glow {
      position: absolute;
      inset: 0;
      border-radius: 12px;
      box-shadow: inset 0 0 0 3px var(--primary-light);
      opacity: 0;
      transition: var(--transition);
    }

    .chat-item:hover .profile-pic-glow {
      opacity: 1;
    }

    .user-info {
      flex: 1;
    }

    .user-info h3 {
      font-size: 17px;
      margin-bottom: 4px;
      color: var(--text);
    }

    .user-info p {
      font-size: 13px;
      color: var(--text-light);
    }

    .chat-status {
      font-size: 24px;
      color: var(--primary);
      margin-left: 10px;
      position: relative;
    }

    /* Three dots menu */
    .menu-dots {
      font-size: 18px;
      color: var(--text-light);
      padding: 5px;
      cursor: pointer;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      display: flex;
      justify-content: center;
      align-items: center;
      transition: var(--transition);
    }

    .menu-dots:hover {
      background-color: rgba(108, 99, 255, 0.1);
      color: var(--primary);
    }

    .dropdown-menu {
      position: absolute;
      top: 100%;
      right: 0;
      width: 150px;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 5px 25px rgba(0, 0, 0, 0.12);
      overflow: hidden;
      visibility: hidden;
      opacity: 0;
      transform: translateY(10px);
      transition: var(--transition);
      z-index: 10;
    }

    .dropdown-menu.active {
      visibility: visible;
      opacity: 1;
      transform: translateY(0);
    }

    .dropdown-menu button {
      display: flex;
      align-items: center;
      width: 100%;
      padding: 12px 15px;
      font-size: 14px;
      color: var(--text);
      transition: var(--transition);
      text-align: left;
    }

    .dropdown-menu button i {
      margin-right: 10px;
      font-size: 16px;
    }

    .dropdown-menu button.delete-btn {
      color: var(--danger);
    }

    .dropdown-menu button:hover {
      background-color: rgba(108, 99, 255, 0.05);
    }

    .dropdown-menu button.delete-btn:hover {
      background-color: rgba(255, 59, 92, 0.05);
    }

    .empty-state {
      text-align: center;
      padding: 30px;
      color: var(--text-light);
      border: 2px dashed rgba(108, 99, 255, 0.2);
      border-radius: var(--radius);
      margin: 20px 0;
    }

    .empty-state i {
      font-size: 40px;
      color: var(--primary-light);
      margin-bottom: 15px;
      opacity: 0.7;
    }

    .empty-state p {
      font-size: 16px;
      margin-bottom: 15px;
    }

    .start-chat-btn {
      display: inline-block;
      padding: 10px 20px;
      background: linear-gradient(45deg, var(--primary), var(--primary-light));
      color: white;
      border-radius: 30px;
      font-weight: 500;
      box-shadow: 0 5px 15px rgba(108, 99, 255, 0.25);
      transition: var(--transition);
    }

    .start-chat-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(108, 99, 255, 0.4);
    }

    /* Modal Styles */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(4px);
      z-index: 999;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 20px;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s;
    }

    .modal-overlay.active {
      opacity: 1;
      visibility: visible;
    }

    .modal {
      max-width: 400px;
      width: 100%;
      background: white;
      border-radius: 15px;
      overflow: hidden;
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
      transform: translateY(30px);
      transition: all 0.4s;
    }

    .modal-overlay.active .modal {
      transform: translateY(0);
    }

    .modal-header {
      padding: 18px 20px;
      border-bottom: 1px solid rgba(0, 0, 0, 0.06);
      display: flex;
      align-items: center;
    }

    .modal-header i {
      font-size: 24px;
      color: var(--danger);
      margin-right: 15px;
    }

    .modal-header h3 {
      font-size: 18px;
      font-weight: 600;
    }

    .modal-body {
      padding: 20px;
    }

    .modal-body p {
      font-size: 15px;
      color: var(--text-light);
      margin-bottom: 25px;
      line-height: 1.5;
    }

    .modal-footer {
      padding: 15px 20px;
      display: flex;
      justify-content: flex-end;
      gap: 12px;
    }

    .modal-btn {
      padding: 10px 18px;
      border-radius: 8px;
      font-weight: 500;
      font-size: 14px;
      transition: var(--transition);
    }

    .cancel-btn {
      background-color: #f1f3f5;
      color: var(--text);
    }

    .cancel-btn:hover {
      background-color: #e9ecef;
    }

    .delete-confirm-btn {
      background-color: var(--danger);
      color: white;
      box-shadow: 0 4px 12px rgba(255, 59, 92, 0.25);
    }

    .delete-confirm-btn:hover {
      background-color: var(--danger-dark);
      box-shadow: 0 6px 15px rgba(255, 59, 92, 0.35);
    }

    /* Bottom Navigation */
    nav {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      display: flex;
      justify-content: space-around;
      padding: 12px 0;
      box-shadow: 0 -3px 15px var(--shadow);
      z-index: 100;
    }

    nav a {
      display: flex;
      flex-direction: column;
      align-items: center;
      color: var(--text-light);
      padding: 8px 16px;
      position: relative;
      transition: var(--transition);
    }

    nav a i {
      transition: var(--transition);
      opacity: 0.7;
      font-size: 24px;
    }

    nav a:hover i {
      transform: translateY(-5px);
      opacity: 1;
    }

    nav a.active-link {
      color: var(--primary);
    }

    nav a.active-link i {
      opacity: 1;
      color: var(--primary);
    }

    nav a.active-link::after {
      content: '';
      position: absolute;
      bottom: -12px;
      left: 50%;
      transform: translateX(-50%);
      width: 40px;
      height: 4px;
      background: linear-gradient(90deg, var(--primary), var(--primary-light));
      border-radius: 4px;
    }

    /* Delete Animation */
    @keyframes slideOut {
      from {
        transform: translateX(0);
        opacity: 1;
      }
      to {
        transform: translateX(-100%);
        opacity: 0;
        height: 0;
        margin: 0;
        padding: 0;
      }
    }

    .slide-out {
      animation: slideOut 0.5s forwards;
    }

    /* Responsive Design */
    @media (max-width: 576px) {
      .header-left h2 {
        font-size: 18px;
      }
      
      .profile-pic-container {
        width: 50px;
        height: 50px;
      }
      
      .user-info h3 {
        font-size: 16px;
      }
      
      .user-info p {
        font-size: 12px;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Screen -->
  <div class="loader-container" id="loaderContainer">
    <div class="loader"></div>
  </div>

  <!-- Particle Background -->
  <div id="particles-js"></div>
  
  <!-- Confirmation Modal -->
  <div class="modal-overlay" id="deleteModal">
    <div class="modal">
      <div class="modal-header">
        <i class="fas fa-exclamation-triangle"></i>
        <h3>Delete Conversation</h3>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this conversation? This action will remove the chat from your inbox, but will still be available to the other user.</p>
      </div>
      <div class="modal-footer">
        <button class="modal-btn cancel-btn" id="cancelDelete">Cancel</button>
        <button class="modal-btn delete-confirm-btn" id="confirmDelete">Delete</button>
      </div>
    </div>
  </div>
  
  <div class="content-wrapper">
    <!-- Top Section -->
    <header>
      <div class="header-left">
        <h2>Your Messages</h2>
      </div>
      <!-- Profile Link for Logged-In User -->
      <a href="{% url 'feed:profile' user_id=request.user.id %}">
        <img src="{{ request.user.profile_picture.url }}" alt="Profile">
      </a>
    </header>
    
    <!-- Chat List Section -->
    <section>
      <h3 class="section-title">Recent Conversations</h3>
      
      <div class="chat-list" id="chatList">
        {% if users %}
          {% for user in users %}
          <div class="chat-item-wrapper" data-username="{{ user.username }}">
            <div class="chat-item">
              <a href="{% url 'chat:chat_with_user' user.username %}" class="chat-link">
                <div class="profile-pic-container" style="position: relative;">
                  <img src="{{ user.profile_picture.url }}" alt="Profile" class="profile-pic">
                  <div class="profile-pic-glow"></div>
                  {% if user.has_unread %}
                    <span class="unread-dot"></span>
                  {% endif %}
                </div>
                
                <div class="user-info">
                  <h3>{{ user.full_name }}</h3>
                  <p>
                    {% if user.questionnaire %}
                    <i class="fas fa-graduation-cap"></i> {{ user.department }} • {{ user.questionnaire.year }}
                    {% else %}
                    <i class="fas fa-user"></i> {{ user.username }}
                    {% endif %}
                  </p>
                </div>
              </a>
              <div class="chat-status">
                <div class="menu-dots">
                  <i class="fas fa-ellipsis-v"></i>
                </div>
                <div class="dropdown-menu">
                  <button class="delete-btn" data-username="{{ user.username }}">
                    <i class="fas fa-trash-alt"></i> Delete Chat
                  </button>
                </div>
              </div>
            </div>
          </div>
          {% endfor %}
        {% else %}
          <div class="empty-state">
            <i class="fas fa-comments"></i>
            <p>No conversations yet</p>
            <a href="{% url 'feed:explore' %}" class="start-chat-btn">
              <i class="fas fa-search"></i> Find People
            </a>
          </div>
        {% endif %}
      </div>
    </section>
  </div>

  <!-- Bottom Navigation Bar -->
  <nav>
    <a href="{% url 'feed:home' %}">
      <i class="fas fa-home"></i>
    </a>
    <a href="{% url 'feed:explore' %}">
      <i class="fas fa-compass"></i>
    </a>
    <a href="{% url 'feed:create_post' %}">
      <i class="fas fa-plus-circle"></i>
    </a>
    <a href="{% url 'feed:friends_list' %}">
      <i class="fas fa-user-friends"></i>
    </a>
    <a href="{% url 'chat:inbox' %}" class="active-link">
      <i class="fas fa-comment"></i>
    </a>
  </nav>

  
  
  <style>
    /* Your existing styles remain the same */
    
    /* Add these new styles for smooth transitions */
    .chat-list {
      transition: opacity 0.3s ease;
    }
    
    /* Rest of your styles */
  </style>
  
  <style>
    /* Add this to your existing styles */
    .toast {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      padding: 12px 24px;
      border-radius: 4px;
      color: white;
      font-weight: 500;
      opacity: 0;
      transition: opacity 0.3s;
      z-index: 1000;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      max-width: 90%;
      text-align: center;
    }
  
    .toast.show {
      opacity: 1;
    }
  
    .toast.success {
      background-color: #4CAF50;
    }
  
    .toast.error {
      background-color: #F44336;
    }
  
    .fa-spin {
      animation: fa-spin 1s infinite linear;
    }
  
    @keyframes fa-spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>






<script>

  // Loading animation
  window.addEventListener('load', function() {
    setTimeout(function() {
      const loader = document.getElementById('loaderContainer');
      loader.style.opacity = '0';
      setTimeout(function() {
        loader.style.visibility = 'hidden';
      }, 500);
    }, 1000);
  });

  // Initialize particles.js
  particlesJS('particles-js', {
    particles: {
      number: { value: 100, density: { enable: true, value_area: 1000 } },
      color: { value: "#6c63ff" },
      shape: { type: "circle" },
      opacity: { value: 0.5, random: true },
      size: { value: 3, random: true },
      line_linked: {
        enable: true,
        distance: 150,
        color: "#6c63ff",
        opacity: 0.4,
        width: 1
      },
      move: {
        enable: true,
        speed: 2,
        direction: "none",
        random: false,
        straight: false,
        out_mode: "out",
        bounce: false,
        attract: { enable: true, rotateX: 600, rotateY: 1200 }
      }
    },
    interactivity: {
      detect_on: "canvas",
      events: {
        onhover: { enable: true, mode: "grab" },
        onclick: { enable: true, mode: "push" },
        resize: true
      },
      modes: {
        grab: { distance: 140, line_linked: { opacity: 1 } },
        push: { particles_nb: 4 }
      }
    }
  });

  // Toast notification function
  function showToast(message, isError = false) {
    const toast = document.createElement('div');
    toast.className = `toast ${isError ? 'error' : 'success'}`;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.classList.add('show');
    }, 10);
    
    setTimeout(() => {
      toast.classList.remove('show');
      setTimeout(() => {
        toast.remove();
      }, 300);
    }, 3000);
  }

  // Get CSRF token from cookies
  function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
      const cookies = document.cookie.split(';');
      for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();
        if (cookie.substring(0, name.length + 1) === (name + '=')) {
          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
          break;
        }
      }
    }
    return cookieValue;
  }

  // Real-time inbox updates
  let lastUpdateTime = new Date().toISOString();
  let isRefreshing = false;

  function checkForNewMessages() {
    if (isRefreshing) return;
    
    fetch(`/chat/inbox_updates/?after=${encodeURIComponent(lastUpdateTime)}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      credentials: 'same-origin'
    })
    .then(response => {
      if (!response.ok) throw new Error('Network response was not ok');
      return response.json();
    })
    .then(data => {
      if (data.error) {
        console.error('Error:', data.error);
        return;
      }
      
      if (data.updates) {
        lastUpdateTime = data.last_update;
        
        if (data.new_messages || data.deleted_chats) {
          refreshInboxContent();
        }
      }
    })
    .catch(error => {
      console.error('Error checking for updates:', error);
      // Retry after a delay
      setTimeout(checkForNewMessages, 10000);
    });
  }

  function refreshInboxContent() {
    if (isRefreshing) return;
    isRefreshing = true;
    
    // Show loading indicator
    const chatList = document.getElementById('chatList');
    chatList.style.opacity = '0.5';
    
    fetch('/chat/inbox_content/', {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      credentials: 'same-origin'
    })
    .then(response => {
      if (!response.ok) throw new Error('Network response was not ok');
      return response.json();
    })
    .then(data => {
      if (data.html) {
        // Replace the chat list content with fade animation
        chatList.style.opacity = '0';
        setTimeout(() => {
          chatList.innerHTML = data.html;
          chatList.style.opacity = '1';
          initializeEventListeners();
        }, 300);
      }
    })
    .catch(error => {
      console.error('Error refreshing inbox:', error);
      showToast('Failed to refresh inbox', true);
    })
    .finally(() => {
      isRefreshing = false;
      chatList.style.opacity = '1';
    });
  }

  function initializeEventListeners() {
    // Close all dropdown menus
    function closeAllDropdowns() {
      document.querySelectorAll('.dropdown-menu').forEach(menu => {
        menu.classList.remove('active');
      });
    }
    
    // Handle menu dots click
    document.querySelectorAll('.menu-dots').forEach(dot => {
      dot.addEventListener('click', function(e) {
        e.stopPropagation();
        const dropdown = this.nextElementSibling;
        if (dropdown.classList.contains('active')) {
          dropdown.classList.remove('active');
        } else {
          closeAllDropdowns();
          dropdown.classList.add('active');
        }
      });
    });
    
    // Close dropdown when clicking elsewhere
    document.addEventListener('click', function() {
      closeAllDropdowns();
    });
    
    // Delete button click handling
    const deleteModal = document.getElementById('deleteModal');
    const cancelDelete = document.getElementById('cancelDelete');
    const confirmDelete = document.getElementById('confirmDelete');
    
    let currentUsername = null;
    
    document.querySelectorAll('.delete-btn').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        currentUsername = this.dataset.username;
        deleteModal.classList.add('active');
      });
    });
    
    // Cancel delete
    cancelDelete.addEventListener('click', function(e) {
      e.preventDefault();
      deleteModal.classList.remove('active');
      currentUsername = null;
    });
    
    // Confirm delete
    confirmDelete.addEventListener('click', function(e) {
      e.preventDefault();
      if (currentUsername) {
        // Show loading state
        const originalText = this.textContent;
        this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';
        this.disabled = true;
        
        // Call the delete API
        fetch(`/chat/delete/${currentUsername}/`, {
          method: 'POST',
          headers: {
            'X-CSRFToken': getCookie('csrftoken'),
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          credentials: 'same-origin'
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            showToast('Conversation deleted successfully');
            // Trigger a refresh of the inbox
            refreshInboxContent();
          } else {
            showToast(data.error || 'Failed to delete conversation', true);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('Failed to delete conversation. Please try again.', true);
        })
        .finally(() => {
          deleteModal.classList.remove('active');
          currentUsername = null;
          confirmDelete.textContent = originalText;
          confirmDelete.disabled = false;
        });
      }
    });

    // Close modal when clicking outside
    deleteModal.addEventListener('click', function(e) {
      if (e.target === this) {
        deleteModal.classList.remove('active');
        currentUsername = null;
      }
    });
  }

  // Start polling for updates
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize event listeners
    initializeEventListeners();
    
    // Start checking for updates after a short delay
    setTimeout(() => {
      checkForNewMessages();
      // Set up regular polling every 5 seconds
      setInterval(checkForNewMessages, 5000);
    }, 2000);
  });




    // Automatically attach CSRF token to every AJAX request
    $.ajaxSetup({
      beforeSend: function(xhr, settings) {
          const csrftoken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
          xhr.setRequestHeader("X-CSRFToken", csrftoken);
      }
  });
</script>
</body>
</html>






















